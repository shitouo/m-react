{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./project/App.js","webpack:///./project/index.js","webpack:///./src/Constance.js","webpack:///./src/FiberNode.js","webpack:///./src/MReact.js","webpack:///./src/MReactDom.js","webpack:///./src/ReactRoot.js","webpack:///./src/ScheduleWork.js","webpack:///./src/UpdateWorks.js","webpack:///./src/Util.js","webpack:///./src/classComponent.js"],"names":["App","MReact","Component","constructor","state","getDerivedStateFromProps","componentDidMount","setState","render","content","mReactDom","document","getElementById","Constance","effects","NoEffect","Placement","PlacementAndUpdate","Incomplete","PerformedWork","Update","Deletion","Callback","Snapshot","tags","HostRoot","ClassComponent","FunctionalComponent","HostText","HostComponent","Fragment","works","NoWork","Never","$$types","REACT_ELEMENT_TYPE","Symbol","for","REACT_PORTAL_TYPE","REACT_FRAGMENT_TYPE","mode","sync","constance","FiberNode","tag","pendingProps","type","stateNode","return","child","sibling","memorizedProps","memorizedState","updateQuene","effectTag","nextEffect","firstEffect","lastEffect","expirationTime","alternate","didWarnStateUpdateForUnmountedComponent","ReactNoopUpdateQuene","isMounted","warnNoop","publicInstance","callerName","_constructor","componentName","name","displayName","warningKey","enqueueForceUpdate","callback","enqueueSetState","partialState","props","context","updater","forUpdate","enqueneForceUpdate","createElement","config","children","propName","hasOwnProperty","length","$$typeof","window","lastScheduledRoot","firstScheduledRoot","nextFlushedRoot","nestedUpdateCount","nextFlushedExpirationTime","isRendering","nextUnitOfWork","isRootReadyForCommit","interruptedBy","enableGetDerivedStateFromCatch","MReactDom","elements","container","reactRoot","isWorking","isCommiting","ReactRoot","containerInfo","_internalRoot","createFiberRoot","rootWorkInProgress","rootFiber","root","current","pendingChildren","pendingCommitExpirationTime","finishedWork","remainingExpirationTime","firstBatch","nextScheduleRoot","scheduleRootUpdate","element","update","isReplace","isForced","capturedValue","next","quene","baseState","first","last","callbackList","hasForceUpdate","isInitialized","capturedValues","updateQueue","scheduleWork","renderRoot","isAsync","createWorkInProgress","workLoop","didCompleteRoot","workInProgress","ScheduleWork","fiber","node","requestWork","addRootToSchedule","isBatchingUpdates","performeWork","minExpirationTime","dl","deadline","findHighestPriorityRoot","performWorkOnRoot","completeRoot","_expirationTime","commitRoot","highestPriorityWork","highestPriorityRoot","previousScheduledRoot","nextScheduledRoot","previousFlushedRoot","performUnitOfWork","beginWork","completeUnitOfWork","returnFiber","siblingFiber","siblings","completeWork","resetExpirationTime","renderTime","newExpirationTime","renderExpirationTime","newProps","newText","createTextInstance","oldProps","_instance","updatePayload","diffProperties","createInstance","appendAllChildren","finalizeInitialChildren","domElement","lastRawProps","nextRawProps","rootContainerElement","lastProps","nextProps","onClick","propKey","styleName","styleUpdates","push","nextProp","lastProp","undefined","updateHostRoot","updateClassComponent","updateHostText","updateHostComponent","committedExpirationTime","primaryEffectTag","commitPlacement","_current","commitWork","commitLifeCycles","remainingTime","parentFiber","parent","isContainer","appendChild","_instance8","commitUpdate","textInstance","nextText","oldText","commitTextUpdate","internalInstanceHandle","randomKey","Math","random","toString","slice","internalEventHandlersKey","i","propValue","firstChild","lastChild","nodeType","nodeValue","textContent","finishedRoot","currentTime","_instance2","util","UpdateWorks","that","instance","_reactInternalFiber","insertUpdateIntoFiber","bind","queue1","queue2","createUpdateQueue","appendUpdateToQueue","queue","firstUpdate","lastUpdate","firstCapturedUpdate","lastCapturedUpdate","firstCapturedEffect","lastCapturedEffect","prevState","processUpdateQueue","bailoutOnAlreadyFinishedWork","reconcileChildren","cloneChildFibers","currentChild","newChild","shouldUpdate","constructClassInstance","mountClassInstance","updateClassInstance","finishClassComponent","hasContext","didCaptureError","nextChildren","prevPops","text","internalInstanceKey","textNode","createTextNode","shouldTrackSideEffects","reconcileChildFibers","currentFirstChild","newFiber","reconcileSingleElement","placeSingleChild","reconcileSingleTextNode","key","existing","index","_create4","createFiberFromElement","created","createFiberFromText","fiberTag","Util","currentQueue","dontMutatePrevState","didSkip","updateExpirationTime","_partialState","Object","assign","_callBackList","callGetDerivedStateFromProps","call","ctor","hasNewLifecycles","getSnapshotBeforeUpdate","UNSAFE_componentWillReceiveProps","componentWillReceiveProps","oldState","newState","derivedStateFromCatch","getDerivedStateFromCatch","derivedStateFromProps","_updateQueue3","componentDidUpdate","checkShouldComponentUpdate","newContext","shouldComponentUpdate"],"mappings":"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","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./project/index.js\");\n","import MReact from '../src/MReact'\n\nclass App extends MReact.Component {\n  constructor () {\n    super()\n    this.state = {\n      'content': 111\n    }\n  }\n\n  getDerivedStateFromProps () {\n\n  }\n\n  componentDidMount () {\n    this.setState({\n      'content': '222'\n    })\n  }\n\n  render () {\n    return (\n      <div>{this.state.content}</div>\n    )\n  }\n}\n\nexport default App","import mReactDom from '../src/MReactDom';\nimport MReact from '../src/MReact'\nimport App from './App.js'\n\nmReactDom.render(\n  <App />,\n  document.getElementById('root')\n)","/**\n * 常量\n */\nclass Constance {\n  constructor () {\n    this.effects = {\n      NoEffect: 0,\n      Placement: 2,\n      PlacementAndUpdate: 6,\n      Incomplete: 512,\n      PerformedWork: 1,\n      Update: 4,\n      Deletion: 8,\n      Callback: 32,\n      Snapshot: 2048\n    }\n    this.tags = {\n      HostRoot: 3,\n      ClassComponent: 2,\n      FunctionalComponent: 1,\n      HostText: 6,\n      HostComponent: 5,\n      Fragment: 10\n    }\n    this.works = {\n      NoWork: 0,\n      Never: 1073741823\n    }\n    this.$$types = {\n      REACT_ELEMENT_TYPE: (typeof Symbol === 'function' && Symbol.for)? Symbol.for('react.element') : 0xeac7,\n      REACT_PORTAL_TYPE: (typeof Symbol === 'function' && Symbol.for)? Symbol.for('react.portal') : 0xeaca,\n      REACT_FRAGMENT_TYPE: (typeof Symbol === 'function' && Symbol.for)? Symbol.for('react.fragment') : 0xeacb\n    }\n\n    this.mode = {\n      sync: 1\n    }\n  }\n}\n\nexport default Constance","/**\n * fiber节点类\n */\nimport Constance from './Constance'\n\nconst constance = new Constance()\n\nclass FiberNode {\n  constructor (tag, pendingProps) {\n    this.tag = tag\n    this.type = null\n    this.stateNode = null\n\n    this.return = null\n    this.child = null\n    this.sibling = null\n\n    this.pendingProps = pendingProps\n    this.memorizedProps = null\n    this.memorizedState = null\n    this.updateQuene = null\n\n    this.effectTag = constance.effects.NoEffect\n    this.nextEffect = null\n    this.firstEffect = null\n    this.lastEffect = null\n\n    this.expirationTime = constance.works.NoWork\n\n    this.alternate = null\n  }\n}\n\nexport default FiberNode","/**\n * MReact的主文件\n */\nimport Constance from './Constance'\n\nconst constance = new Constance()\n\nlet didWarnStateUpdateForUnmountedComponent = {}\n\nconst ReactNoopUpdateQuene = {\n  isMounted () {\n    return false\n  },\n  warnNoop (publicInstance, callerName) {\n    const _constructor = publicInstance.constructor\n    const componentName = _constructor && (_constructor.name || _constructor.displayName) || 'ReactClass'\n    const warningKey = `&{componentName}.${callerName}`\n    if (didWarnStateUpdateForUnmountedComponent[warningKey]) {\n      return false\n    }\n    didWarnStateUpdateForUnmountedComponent[warningKey] = true\n  },\n  enqueueForceUpdate (publicInstance, callback) {\n    this.warnNoop(publicInstance, 'forceUpdate')\n  },\n  enqueueSetState (publicInstance, partialState, callback) {\n    this.warnNoop(publicInstance, 'setState')\n  }\n}\n\nclass Component {\n  // 所有的组件都要继承这个类，因为这个类上有setState和forceUpdate\n  constructor (props, context, updater) {\n    this.props = props\n    this.context = context\n    this.updater = updater || ReactNoopUpdateQuene\n  }\n  setState (partialState, callback) {\n    this.updater.enqueueSetState(this, partialState, callback)\n  }\n  forUpdate (callback) {\n    this.updater.enqueneForceUpdate(this, callback)\n  }\n}\n\nconst MReact = {\n  createElement (type, config, ...children) {\n    let props = {}\n    if (config) {\n      for (let propName in config) {\n        if (config.hasOwnProperty(propName)) {\n          props[propName] = config[propName]\n        }\n      }\n    }\n    if (children) {\n      props.children = children\n      if (children.length === 1) {\n        props.children = children[0]\n      }\n    }\n    return {\n      $$typeof: constance.$$types.REACT_ELEMENT_TYPE,\n      type,\n      props\n    }\n  },\n  Component: Component\n}\n\nexport default MReact","/**\n * 自造的reactDom\n */\nimport ReactRoot from './ReactRoot'\n\n// 定义全局变量\nwindow.lastScheduledRoot = null\nwindow.firstScheduledRoot = null\nwindow.nextFlushedRoot = null\nwindow.nestedUpdateCount = 0\nwindow.nextFlushedExpirationTime = 0\nwindow.isRendering = false\nwindow.nextUnitOfWork = null\nwindow.isRootReadyForCommit = false\nwindow.interruptedBy = null\nwindow.enableGetDerivedStateFromCatch = false\n\nclass MReactDom {\n  render (elements, container) {\n    // 1、把reactElement，转成Fiber tree\n    // 2、解析\n    // 3、commit\n    \n    // 先生成reactRoot，然后调用ReactRoot的render\n    let reactRoot = new ReactRoot(container)\n    reactRoot.render(elements)// 在调用到这的时候，elements已经通过babel和MReact.createElement生成reactElement了。\n  }\n}\n\nexport default new MReactDom()","/**\n * react的root类\n */\nimport FiberNode from './FiberNode'\nimport Constance from './Constance'\nimport ScheduleWork from './ScheduleWork'\n\nconst constance = new Constance()\n\nlet isWorking = false\nlet isCommiting = false\n\nclass ReactRoot extends ScheduleWork {\n  constructor (containerInfo) {\n    super()\n     this._internalRoot = this.createFiberRoot(containerInfo)\n    //  this.nextUnitOfWork = null\n    this.rootWorkInProgress = null\n  }\n\n  createFiberRoot (containerInfo) {\n    // 创建带fiber的root对象\n    const rootFiber = new FiberNode(constance.tags.HostRoot, null)\n    const root = {\n      current: rootFiber,\n      containerInfo: containerInfo,\n      pendingChildren: null,\n      pendingCommitExpirationTime: constance.works.NoWork,\n      finishedWork: null,\n      remainingExpirationTime: constance.works.NoWork,\n      firstBatch: null,\n      nextScheduleRoot: null\n    }\n    rootFiber.stateNode = root\n    return root\n  }\n\n  scheduleRootUpdate (current, element, expirationTime) {\n    const update = {\n      expirationTime: expirationTime,\n      partialState: { element: element },\n      callback: function () {},\n      isReplace: false,\n      isForced: false,\n      capturedValue: null,\n      next: null\n    }\n    const quene = {\n      baseState: null,\n      expirationTime: expirationTime,\n      first: update,\n      last: update,\n      callbackList: null,\n      hasForceUpdate: false,\n      isInitialized: false,\n      capturedValues: null\n    }\n    current.updateQueue = quene\n    this.scheduleWork(current, expirationTime)\n  }\n\n  render (children) {\n    this.scheduleRootUpdate(this._internalRoot.current, children, 1)\n  }\n\n  renderRoot (root, expirationTime, isAsync) {\n    window.nextUnitOfWork = this.createWorkInProgress(root.current, null, 1)\n    this.workLoop(false)\n\n    let didCompleteRoot = false\n    window.isWorking = false\n\n    if (window.nextUnitOfWork === null) {\n      // we reached the root\n      if (window.isRootReadyForCommit) {\n        didCompleteRoot = true\n        root.pendingCommitExpirationTime = expirationTime\n        let finishedWork = root.current.alternate\n        return finishedWork\n      }else {\n        // the root did not complete\n        window.interruptedBy = null\n      }\n    }else {\n      window.interruptedBy = null\n      return null\n    }\n  }\n\n  createWorkInProgress (current, pendingProps, expirationTime) {\n    // 创建alternate的fiber\n    let workInProgress = current.alternate\n    if (workInProgress === null) {\n      workInProgress = new FiberNode(current.tag, pendingProps)\n      workInProgress.type = current.type\n      workInProgress.stateNode = current.stateNode\n      workInProgress.alternate = current\n      current.alternate = workInProgress\n    }else {\n      workInProgress.pendingProps = pendingProps\n      workInProgress.effectTag = constance.effects.NoEffect\n      workInProgress.nextEffect = null\n      workInProgress.firstEffect = null\n      workInProgress.lastEffect = null\n    }\n    workInProgress.expirationTime = expirationTime\n    workInProgress.child = current.child\n    workInProgress.sibling = current.sibling\n    // workInProgress.return = current.return\n    workInProgress.memorizedProps = current.memorizedProps\n    workInProgress.memorizedState = current.memorizedState\n    workInProgress.updateQueue = current.updateQueue\n\n    return workInProgress\n    \n  }\n  \n}\n\nexport default ReactRoot","/**\n * 调度工作，控制work的流程\n */\nimport Constance from './Constance'\nimport UpdateWorks from './UpdateWorks'\n\nconst constance = new Constance()\nlet isRootReadyForCommit = false\nlet isWorking = false\nlet isCommiting = false\n\nclass ScheduleWork extends UpdateWorks {\n  scheduleWork (fiber, expirationTime) {\n    // walk the parent path to the root and update each node's expiration time\n    let node = fiber\n    while (node) {\n      if (node.expirationTime === constance.works.NoWork || node.expirationTime > expirationTime) {\n        node.expirationTime = expirationTime\n      }\n\n      if (node.alternate) {\n        let alternate = node.alternate\n        if (alternate.expirationTime === constance.works.NoWork || alternate.expirationTime > expirationTime) {\n          alternate.expirationTime = expirationTime\n        }\n      }\n\n      if (!node.return) {\n        // walk to the top\n        if (node.tag === constance.tags.HostRoot) {\n          let root = node.stateNode\n          this.requestWork(root, expirationTime)\n        }\n      }\n\n      node = node.return\n    }\n  }\n  \n  requestWork (root, expirationTime) {\n    // requestWork is called by the scheduler whenever a root receives an update\n    // it's up to the renderer to call renderRoot at some point in the future\n    this.addRootToSchedule(root, expirationTime)\n\n    if (window.isRendering) {\n      // Prevent reentrancy(重新进去). Remaining work will be scheduled at the end of\n      // the currently rendering batch.\n      return;\n    }\n\n    if (window.isBatchingUpdates) {\n      // Flush work at the end of the batch.\n      return\n    }\n\n    if (expirationTime === constance.mode.sync) {\n      this.performeWork(expirationTime, false, null)\n    }\n\n  }\n\n  performeWork (minExpirationTime, isAsync, dl) {\n    let deadline = dl\n\n    // keep working on roots until there's no more work, or until we reach the deadline\n    this.findHighestPriorityRoot()\n\n    if (isAsync) {\n      // TODO\n    }else {\n      while (window.nextFlushedRoot && window.nextFlushedExpirationTime !== constance.works.NoWork && (minExpirationTime === constance.works.NoWork || minExpirationTime >= window.nextFlushedExpirationTime)) {\n        this.performWorkOnRoot(window.nextFlushedRoot, window.nextFlushedExpirationTime, false)\n        this.findHighestPriorityRoot()\n      }\n    }\n  }\n\n  performWorkOnRoot (root, expirationTime, isAsync) {\n    window.isRendering = true\n\n    // check if this is async work or sync/expired work\n    if (!isAsync) {\n      // flush sync work\n      let finishedWork = root.finishedWork\n      if (finishedWork) {\n        // this root is already complete. we can commit it\n\n      }else {\n        root.finishedWork = null\n        finishedWork = this.renderRoot(root, expirationTime,false)\n        if (finishedWork) {\n          this.completeRoot(root, finishedWork, expirationTime)\n        }\n      }\n    }else {\n      // flush async work\n    }\n\n    window.isRendering = false\n  }\n\n  completeRoot (root, finishedWork, expirationTime) {\n    let firstBatch = root.firstBatch\n    if (firstBatch && firstBatch._expirationTime <= expirationTime) {\n      // TODO\n    }\n\n    // commit the root\n    root.finishedWork = null\n    root.remainingExpirationTime = this.commitRoot(finishedWork)\n  }\n\n  findHighestPriorityRoot () {\n    let highestPriorityWork = constance.works.NoWork\n    let highestPriorityRoot = null\n    if (window.lastScheduledRoot) {\n      let previousScheduledRoot = window.lastScheduledRoot\n      let root = window.firstScheduledRoot\n      while (root) {\n        let remainingExpirationTime = root.remainingExpirationTime\n        if (remainingExpirationTime === constance.works.NoWork) {\n          // this root no longer has work. Remove it from the scheduler.\n          if (root === root.nextScheduledRoot) {\n            // this is the only root in the list\n            root.nextScheduleRoot = null\n            window.firstScheduledRoot = window.lastScheduledRoot = null\n            break\n          }else if (root === window.firstScheduledRoot) {\n            // this is the first root in the list \n            let next = root.nextScheduleRoot\n            window.firstScheduledRoot = next\n            window.lastScheduledRoot.nextScheduleRoot = next // 这个链表要永远成环\n            root.nextScheduleRoot = null // ?\n          }else if (root === window.lastScheduledRoot) {\n            // this is the last root in the list\n            window.lastScheduledRoot = previousScheduledRoot\n            window.lastScheduledRoot.nextScheduleRoot = window.firstScheduledRoot\n            root.nextScheduleRoot = null\n            break\n          }else {\n            previousScheduledRoot.nextScheduleRoot = root.nextScheduleRoot\n            root.nextScheduleRoot = null\n          }\n          root = previousScheduledRoot.nextScheduleRoot\n        }else {\n          // this root has more work\n          if (highestPriorityWork === constance.works.NoWork || remainingExpirationTime < highestPriorityWork) {\n            // update the priority, if it's higher\n            highestPriorityWork = remainingExpirationTime\n            highestPriorityRoot = root\n          }\n          if (root === window.lastScheduledRoot) {\n            break\n          }\n          previousScheduledRoot = root\n          root = root.nextScheduleRoot\n        }\n      }\n    }\n\n    // if the next root is the same as the previous root, this is a nested update. To prevent an infinite loop, increment the nested udpate count\n    let previousFlushedRoot = window.nextFlushedRoot\n    if (previousFlushedRoot && previousFlushedRoot === highestPriorityRoot && highestPriorityWork === constance.mode.sync) {\n      window.nestedUpdateCount++\n    }else {\n      // reset whenever we switch roots\n      window.nestedUpdateCount = 0\n    }\n\n    window.nextFlushedRoot = highestPriorityRoot\n    window.nextFlushedExpirationTime = highestPriorityWork\n  }\n\n  addRootToSchedule (root, expirationTime) {\n    // add the root to the schedule\n\n    // check if  this root is already part of the schedule\n    if (root.nextScheduleRoot === null) {\n      // this root is not already scheduled. add it\n      root.remainingExpirationTime = expirationTime\n      if (window.lastScheduledRoot === null) {\n        window.lastScheduledRoot = window.firstScheduledRoot = root\n        root.nextScheduleRoot = root\n      }else {\n        window.lastScheduledRoot.nextScheduleRoot = root\n        window.lastScheduledRoot = root\n        window.lastScheduledRoot.nextScheduleRoot = window.firstScheduledRoot // 为什么非要让链表成环呢？\n      }\n    }else {\n      // this root is already scheduled, but its priority may have increased\n      let remainingExpirationTime = root.remainingExpirationTime\n      if (remainingExpirationTime === constance.works.NoWork || remainingExpirationTime < expirationTime) {\n        root.remainingExpirationTime = expirationTime\n      }\n    }\n  }\n\n  workLoop (isAsync) {\n    while (window.nextUnitOfWork !== null) {\n      window.nextUnitOfWork = this.performUnitOfWork(window.nextUnitOfWork);\n    }\n  }\n\n  performUnitOfWork (workInProgress) {\n    const next = this.beginWork(workInProgress.alternate, workInProgress, 1)\n\n    if (next === null) {\n      // 当前分支解析到叶子结点了，返回efftces给return，并寻找其他分支还未解析的节点\n       this.completeUnitOfWork(workInProgress)\n    }\n\n    return next\n  }\n\n  completeUnitOfWork (workInProgress) {\n    // 合并当前effects到return上，然后找到其他还未解析的fiber节点\n    while(true) {\n      let current = workInProgress.alternate\n      let returnFiber = workInProgress.return\n      let siblingFiber = workInProgress.siblings\n\n      if ((workInProgress.effectTag & constance.effects.Incomplete) === constance.effects.NoEffect) {\n        // 当前节点已经完成\n        // 处理当前节点，做好commit前的准备工作\n        let next = this.completeWork(current, workInProgress)\n        if (next) {\n\n        }\n\n        // 重置剩余时间\n        this.resetExpirationTime(workInProgress, null)\n\n        // 要保证return的所有子节点都complete，才会合并effects提交\n        if (returnFiber && (returnFiber.effectTag & constance.effects.Incomplete) === constance.effects.NoEffect) {\n          // 合并children的effects到return\n          if (returnFiber.firstEffect === null) {\n            returnFiber.firstEffect = workInProgress.firstEffect\n          }\n          if (workInProgress.lastEffect) {\n            if (returnFiber.lastEffect) {\n              returnFiber.lastEffect.nextEffect = workInProgress.firstEffect\n            }\n            returnFiber.lastEffect = workInProgress.lastEffect\n          }\n          \n          // 合并自身的effects到return，并且是在children的后面\n          const effectTag = workInProgress.effectTag\n          if (effectTag > constance.effects.PerformedWork) {\n            if (returnFiber.lastEffect) {\n              returnFiber.lastEffect.nextEffect = workInProgress // 这里的结构类似于链表结构\n            }else {\n              returnFiber.firstEffect = workInProgress\n            }\n            returnFiber.lastEffect = workInProgress\n          }\n        }\n        \n        if (siblingFiber) {\n          return siblingFiber\n        }else if(returnFiber) {\n          workInProgress = returnFiber\n          continue\n        }else {\n          // reached the root\n          window.isRootReadyForCommit = true\n          return null\n        }\n      }\n\n      return null\n    }\n  }\n\n  resetExpirationTime (workInProgress, renderTime) {\n    if (renderTime !== constance.works.Never && workInProgress.expirationTime === constance.works.Never) {\n      // The children of this component are hidden. Don't bubble their\n      // expiration times.\n      return\n    }\n\n    // check for pending updates\n    let newExpirationTime\n    switch(workInProgress.tag) {\n      case constance.tags.HostRoot:\n      case constance.tags.ClassComponent: {\n        let updateQueue = workInProgress.updateQueue\n        if (!updateQueue) {\n          newExpirationTime = constance.works.NoWork\n          break\n        }\n        newExpirationTime = workInProgress.expirationTime\n        break\n      }\n      default: {\n        newExpirationTime = constance.works.NoWork\n      }\n    }\n\n    // Bubble up the earliest expiration time\n    let child = workInProgress.child\n    while(child) {\n      if (child.expirationTime !== constance.works.NoWork && (newExpirationTime === constance.works.NoWork || newExpirationTime > child.expirationTime)) {\n        newExpirationTime = child.expirationTime\n      }\n      child = child.sibling\n    }\n\n    workInProgress.expirationTime = newExpirationTime\n  }\n\n  completeWork (current, workInProgress, renderExpirationTime) {\n    const newProps = workInProgress.pendingProps\n    const type = workInProgress.type\n    switch(workInProgress.tag) {\n      case constance.tags.HostText: {\n          let newText = newProps\n          if (current && workInProgress.stateNode !== null) {\n\n          }else {\n            // TODO: 后面要采用栈的形式来获取ContainerInstance\n            workInProgress.stateNode = this.createTextInstance(newText, workInProgress)\n          }\n          return null\n        }\n      case constance.tags.HostComponent: {\n        if (current && workInProgress.stateNode) {\n          // 之前已经创建了\n          let oldProps = current.memorizedProps\n          let _instance = workInProgress.stateNode\n          let updatePayload = this.diffProperties(_instance, workInProgress.tag, oldProps, newProps, null)\n          workInProgress.updateQueue = updatePayload\n          if (updatePayload) {\n            workInProgress.effectTag |= constance.effects.Update\n          }\n        }else {\n          if (!newProps) {\n            return null\n          }\n          workInProgress.stateNode = this.createInstance(type, workInProgress)\n          this.appendAllChildren()\n          this.finalizeInitialChildren(workInProgress.stateNode, type, newProps)\n        }\n        return null\n      }  \n    }\n  }\n\n  diffProperties (domElement, tag, lastRawProps, nextRawProps, rootContainerElement) {\n    let updatePayload = null\n    let lastProps = void 0\n    let nextProps = void 0\n    switch (tag) {\n      default: {\n        lastProps = lastRawProps\n        nextProps = nextRawProps\n        if (typeof lastProps.onClick !== 'function' || typeof nextProps.onClick === 'function') {\n          // TODO\n        }\n        break\n      } \n    }\n\n    let propKey = void 0\n    let styleName = void 0\n    let styleUpdates = null\n    for (propKey in lastProps) {\n      if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] === null) {\n        continue\n      }\n      if (propKey === 'style') {\n        // TODO\n      }else if (propKey === 'children') {\n        // NOOP. This is handled by the clear text mechanism.\n      }else {\n        (updatePayload = updatePayload || []).push(propKey, null)\n      }\n    }\n\n    for (propKey in nextProps) {\n      let nextProp = nextProps[propKey]\n      let lastProp = lastProps ? lastProps[propKey] : undefined // 之前的属性值\n      if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {\n        continue\n      }\n      if (propKey === 'style') {\n        // TODO\n      }else if (propKey === 'children') {\n        if (lastProp !== nextProp && (typeof nextProp === 'string' || typeof nextProp === 'number')) {\n          (updatePayload = updatePayload || []).push(propKey, '' + nextProp)\n        }\n      }else {\n        (updatePayload = updatePayload || []).push(propKey, nextProp)\n      }\n    }\n\n    if (styleUpdates) {\n      (updatePayload = updatePayload || []).push('style', styleUpdates)\n    }\n\n    return updatePayload\n  }\n\n  beginWork (current, workInProgress, renderExpirationTime) {\n    switch(workInProgress.tag) {\n      case constance.tags.HostRoot:\n        return this.updateHostRoot(current, workInProgress, renderExpirationTime)\n      case constance.tags.ClassComponent:\n        return this.updateClassComponent(current, workInProgress, renderExpirationTime)  \n      case constance.tags.HostText:\n        return this.updateHostText(current, workInProgress)\n      case constance.tags.HostComponent:\n        return this.updateHostComponent(current, workInProgress, renderExpirationTime)\n    }\n  }\n\n  commitRoot (finishedWork, container) {\n    isWorking = true\n    isCommiting = true\n\n    let root = finishedWork.stateNode\n    let committedExpirationTime = root.pendingCommitExpirationTime\n    root.pendingCommitExpirationTime = constance.works.NoWork\n    \n    let firstEffect = null\n    if (finishedWork.effectTag > constance.effects.PerformedWork) {\n      // 当前root也有修改\n      if (finishedWork.lastEffect) {\n        finishedWork.lastEffect.nextEffect = finishedWork\n        firstEffect = finishedWork.firstEffect\n      } else {\n        firstEffect = finishedWork\n      }\n    }else {\n      // 当前root没有修改\n      firstEffect = finishedWork.firstEffect\n    }\n\n    // 在root消费掉所有的effect\n    let nextEffect = firstEffect\n    while (nextEffect) {\n      let effectTag = nextEffect.effectTag\n      let primaryEffectTag = effectTag & (constance.effects.Placement | constance.effects.Update | constance.effects.Deletion);\n      switch(primaryEffectTag) {\n        case constance.effects.Placement: {\n          this.commitPlacement(nextEffect)\n          nextEffect.effectTag &= ~constance.effects.Placement // 去掉当前任务\n          break;\n        }\n        case constance.effects.PlacementAndUpdate: {\n          // Placement\n          this.commitPlacement(nextEffect)\n          nextEffect.effectTag &= ~constance.effects.Placement // 去掉当前任务\n          \n          // Update\n          let _current = nextEffect.alternate\n          this.commitWork(_current, nextEffect)\n        }\n      }\n      nextEffect = nextEffect.nextEffect;\n    }\n\n    // The work-in-progress tree is now the current tree. This must come after\n    // the first pass of the commit phase, so that the previous tree is still\n    // current during componentWillUnmount, but before the second pass, so that\n    // the finished work is current during componentDidMount/Update.\n    root.current = finishedWork\n\n    // 这里要消费掉所有的生命周期\n    nextEffect = firstEffect\n    while (nextEffect) {\n      let effectTag = nextEffect.effectTag;\n\n      if (effectTag & (constance.effects.Update | constance.effects.Callback)) { \n        // 如果effectTag里面包含Update或者Callback\n        let current = nextEffect.alternate;\n        this.commitLifeCycles(null, current, nextEffect, null, committedExpirationTime)\n      }\n\n      var next = nextEffect.nextEffect;\n      // Ensure that we clean these up so that we don't accidentally keep them.\n      // I'm not actually sure this matters because we can't reset firstEffect\n      // and lastEffect since they're on every node, not just the effectful\n      // ones. So we have to clean everything as we reuse nodes anyway.\n      nextEffect.nextEffect = null;\n      // Ensure that we reset the effectTag here so that we can rely on effect\n      // tags to reason about the current life-cycle.\n      nextEffect = next;\n    }\n\n    isCommiting = false\n    isWorking = false\n\n    let remainingTime = root.current.expirationTime\n    return remainingTime\n  }\n\n  commitPlacement(finishedWork) {\n    // Recursively insert all host nodes into the parent.\n\n    // 获取parent\n    let parentFiber = finishedWork.return\n    while (parentFiber !== null) {\n      if (parentFiber.tag === constance.tags.HostComponent || parentFiber.tag === constance.tags.HostRoot) {\n        break\n      }\n      parentFiber = parentFiber.return;\n    }\n\n    let parent = void 0\n    let isContainer = void 0\n    switch (parentFiber.tag) {\n      case constance.tags.HostComponent: {\n        parent = parentFiber.stateNode\n        isContainer = false\n        break\n      }\n      case constance.tags.HostRoot: {\n        parent = parentFiber.stateNode.containerInfo\n        isContainer = true\n        break\n      }\n    }\n    // var before = getHostSibling(finishedWork);\n    // We only have the top Fiber that was inserted but we need recurse down its\n    // children to find all the terminal nodes.\n    let node = finishedWork;\n    while (true) {\n      if (node.tag === constance.tags.HostComponent || node.tag === constance.tags.HostText) {\n        parent.appendChild(node.stateNode)\n      } else if (node.child !== null) {\n        node.child.return = node;\n        node = node.child;\n        continue;\n      }\n      if (node === finishedWork) {\n        return;\n      }\n      while (node.sibling === null) {\n        if (node.return === null || node.return === finishedWork) {\n          return;\n        }\n        node = node.return;\n      }\n      node.sibling.return = node.return;\n      node = node.sibling;\n    }\n  }\n\n  commitWork (current, finishedWork) {\n    // Update的commit工作\n    switch (finishedWork.tag) {\n      case constance.tags.ClassComponent: {\n        return\n      }\n      case constance.tags.HostComponent: {\n        let _instance8 = finishedWork.stateNode\n        if (_instance8) {\n          let newProps = finishedWork.memorizedProps\n          let oldProps = current ? current.memorizedProps : newProps\n          let type = finishedWork.type\n          let updatePayload = finishedWork.updateQueue\n          finishedWork.updateQueue = null\n          if (updatePayload) {\n            this.commitUpdate(_instance8, updatePayload, type, oldProps, newProps, finishedWork)\n          }\n        }\n        return\n      }\n      case constance.tags.HostText: {\n        let textInstance = finishedWork.stateNode\n        let nextText = finishedWork.memorizedProps\n\n        let oldText = current ? current.memorizedProps : newText\n        this.commitTextUpdate(textInstance, oldText, newText)\n        return\n      }\n    }\n  }\n\n  commitUpdate (domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {\n    // update the props handle so that we know which props are the ones with current event handles\n    // updateFiberProps\n    const randomKey = Math.random().toString(36).slice(2);\n    const internalEventHandlersKey = '__reactEventHandlers$' + randomKey;\n    domElement[internalEventHandlersKey] = newProps;\n\n    // apply the diff to the dom node\n    // updateProperties\n    for (let i = 0; i < updatePayload.length; i += 2) {\n      let propKey = updatePayload[i]\n      let propValue = updatePayload[i + 1]\n      if (propKey === 'style') {\n        // TODO\n      }else if (propKey === 'children') {\n        if (propValue) {\n          let firstChild = domElement.firstChild\n          if (firstChild && firstChild === node.lastChild && firstChild.nodeType === 3) {\n            firstChild.nodeValue = propValue\n            return\n          }\n        }\n        node.textContent = propValue\n      }else {\n        // TODO\n      }\n    }\n  }\n\n  commitTextUpdate (textInstance, oldText, newText) {\n    textInstance.nodeValue = newText\n  }\n\n  commitLifeCycles (finishedRoot, current, finishedWork, currentTime, committedExpirationTime) {\n    switch (finishedWork.tag) {\n      case constance.tags.ClassComponent: {\n        let _instance2 = finishedWork.stateNode\n        if (finishedWork.effectTag & constance.effects.Update) {\n          if (current) {\n            // TODO\n          }else {\n            _instance2.props = finishedWork.memorizedProps\n            _instance2.state = finishedWork.memorizedState\n            _instance2.componentDidMount()\n          }\n        }\n\n        let updateQueue = finishedWork.updateQueue\n        if (updateQueue) {\n          // TODO\n        }\n\n        return\n      }\n    }\n  }\n\n}\n\nexport default ScheduleWork","/**\n * update类，记录所有节点类型的update方法\n */\nimport FiberNode from './FiberNode'\nimport Constance from './Constance'\nimport ClassComponent from './classComponent'\nimport Util from './Util'\n\nconst constance = new Constance()\nconst util = new Util()\n\nclass UpdateWorks {\n  get updater () {\n    const that = this\n    return {\n      enqueueSetState: (function (instance, partialState, callback) {\n        const fiber = instance._reactInternalFiber\n        callback = callback === undefined ? null : callback;\n        // var expirationTime = computeExpirationForFiber(fiber);\n        // TODO:计算有效期\n        const expirationTime = 1\n        var update = {\n          expirationTime: expirationTime,\n          partialState: partialState,\n          callback: callback,\n          isReplace: false,\n          isForced: false,\n          capturedValue: null,\n          next: null\n        };\n        this.insertUpdateIntoFiber(fiber, update);\n        this.scheduleWork(fiber, expirationTime);\n      }).bind(that)\n    }\n  }\n\n  insertUpdateIntoFiber (fiber, update, expirationTime) {\n    let alternate = fiber.alternate\n    let queue1\n    let queue2\n    if (!alternate) {\n      queue1 = fiber.updateQueue\n      queue2 = null\n      if (!queue1) {\n        queue1 = fiber.updateQueue = this.createUpdateQueue(fiber.memorizedState)\n      }\n    }else {\n      // there are two owners???\n      queue1 = fiber.updateQueue\n      queue2 = alternate.updateQueue\n      if (queue1 === null) {\n        if (queue2 === null) {\n          // 两个队列都没有\n          queue1 = fiber.updateQueue = this.createUpdateQueue(fiber.memorizedState)\n          queue2 = alternate.updateQueue = this.createUpdateQueue(alternate.memorizedState)\n        }else {\n          // queue1没有，queue2有\n          queue1 = fiber.updateQueue = this.createUpdateQueue(fiber.memorizedState)\n        }\n      }else {\n        if (queue2 === null) {\n          // queue1有，queue2没有\n          queue2 = alternate.updateQueue = this.createUpdateQueue(alternate.memorizedState)\n        }else {\n          // 都有，不做任何操作\n        }\n      }\n    }\n\n    if (queue2 === null || queue1 === queue2) {\n      // there's a single queue\n      this.appendUpdateToQueue(queue1, update, expirationTime)\n    }\n  }\n\n  appendUpdateToQueue (queue, update, expirationTime) {\n    if (!queue.last) {\n      queue.first = queue.last = update\n    }else {\n      queue.last.next = update\n      queue.last = update\n    }\n    if (queue.expirationTime === constance.works.NoWork || queue.expirationTime > update.expirationTime) {\n      queue.expirationTime = update.expirationTime\n    }\n  }\n\n  createUpdateQueue (baseState) {\n    const queue = {\n      expirationTime: constance.works.NoWork,\n      baseState: baseState,\n      firstUpdate: null,\n      lastUpdate: null,\n      firstCapturedUpdate: null,\n      lastCapturedUpdate: null,\n      firstEffect: null,\n      lastEffect: null,\n      firstCapturedEffect: null,\n      lastCapturedEffect: null\n    }\n    return queue\n  }\n\n  updateHostText (current, workInProgress) {\n    workInProgress.memorizedProps = workInProgress.pendingProps\n    return null\n  }\n\n  updateHostRoot (current, workInProgress, renderExpirationTime) {\n    let updateQueue = workInProgress.updateQueue\n    if (updateQueue) {\n      const prevState = workInProgress.memorizedState\n      const state = util.processUpdateQueue(current, workInProgress, updateQueue, null, null, renderExpirationTime)\n      workInProgress.memorizedState = state\n      let element\n      if (prevState === state) {\n        // if the state is the same as before, that's a bailout because we had no work that expires at this time\n        return this.bailoutOnAlreadyFinishedWork(current, workInProgress)\n      }else {\n        element = state.element\n      }\n\n      this.reconcileChildren(current, workInProgress, element)\n    }\n    return workInProgress.child\n  }\n\n  bailoutOnAlreadyFinishedWork (current, workInProgress) {\n    this.cloneChildFibers(current, workInProgress)\n    return workInProgress.child\n  }\n\n  cloneChildFibers (current, workInProgress) {\n    if (workInProgress.child === null) {\n      return\n    }\n\n    let currentChild = workInProgress.child\n    let newChild = this.createWorkInProgress(currentChild, currentChild.pendingProps, currentChild.expirationTime)\n    workInProgress.child = newChild\n\n    newChild.return = workInProgress\n    while(currentChild.sibling) {\n      currentChild = currentChild.sibling\n      newChild = newChild.sibling = this.createWorkInProgress(currentChild, currentChild.pendingProps, currentChild.expirationTime)\n      newChild.return = workInProgress\n    }\n    newChild.sibling = null\n  }\n\n  updateClassComponent (current, workInProgress, renderExpirationTime) {\n    let shouldUpdate // 标识是否需要更新\n\n    if (!current) {\n      // 还未装载过\n      if (!workInProgress.stateNode) {\n        ClassComponent.constructClassInstance(workInProgress, workInProgress.pendingProps, this.updater)\n        ClassComponent.mountClassInstance(workInProgress)\n\n        shouldUpdate = true\n      }else {\n        // TODO\n      }\n    }else {\n      // 已经装载过，现在是更新\n      shouldUpdate = ClassComponent.updateClassInstance(current, workInProgress, renderExpirationTime)\n    }\n\n    return this.finishClassComponent(current, workInProgress, shouldUpdate, null, null, renderExpirationTime)\n  }\n\n  finishClassComponent (current, workInProgress, shouldUpdate, hasContext, didCaptureError, renderExpirationTime) {\n    // update结束\n    const instance = workInProgress.stateNode\n    const nextChildren = instance.render()\n    let currentChild = current ? current.child : null\n    this.reconcileChildren(current, workInProgress, nextChildren, renderExpirationTime)\n\n    // 更新缓存\n    workInProgress.memorizedProps = instance.props\n    workInProgress.memorizedState = instance.state\n\n    return workInProgress.child\n  }\n\n  updateHostComponent (current, workInProgress, renderExpirationTime) {\n    const type = workInProgress.type\n    const memorizedProps = workInProgress.memorizedProps\n    const nextProps = workInProgress.pendingProps\n    const prevPops = current ? current.memorizedProps : null\n    let nextChildren\n\n    if (memorizedProps !== nextProps) {\n      nextChildren = nextProps.children\n      if (typeof nextChildren === 'string' || typeof nextChildren === 'number') {\n        nextChildren = null\n      }\n    }\n    this.reconcileChildren(current, workInProgress, nextChildren)\n    workInProgress.memorizedProps = nextProps\n    return workInProgress.child\n  }\n\n  createTextInstance (text, internalInstanceHandle) {\n    const randomKey = Math.random().toString(36).slice(2);\n    const internalInstanceKey = '__reactInternalInstance$' + randomKey;\n    const textNode = document.createTextNode(text)\n    textNode[internalInstanceKey] = internalInstanceHandle\n    return textNode\n  }\n\n  createInstance (type,internalInstanceHandle) {\n    const randomKey = Math.random().toString(36).slice(2);\n    const internalInstanceKey = '__reactInternalInstance$' + randomKey;\n    const textNode = document.createElement(type)\n    textNode[internalInstanceKey] = internalInstanceHandle\n    return textNode\n  }\n\n  appendAllChildren (parent, workInProgress) {\n\n  }\n\n  finalizeInitialChildren (domElement, type, props) {\n    let newProps\n    switch (type) {\n      case 'img':\n      case 'image':\n      case 'link': {\n        break\n      }\n      default: {\n        newProps = props\n        // 根据props设置dom属性\n        for (let propKey in newProps) {\n          if (!newProps.hasOwnProperty(propKey)) {\n            continue\n          }\n          switch(propKey) {\n            case 'children': {\n              domElement.textContent = newProps.children\n            }\n          }\n        }\n      }\n    }\n  }\n\n  reconcileChildren (current, workInProgress, nextChildren, expirationTime) {\n    if (!current) {\n      // If this is a fresh new component that hasn't been rendered yet, we\n      // won't update its child set by applying minimal side-effects. Instead,\n      // we will add them all to the child before it gets rendered. That means\n      // we can optimize this reconciliation pass by not tracking side-effects.\n      window.shouldTrackSideEffects = false\n      workInProgress.child = this.reconcileChildFibers(workInProgress, null, nextChildren, 1)\n    }else {\n      window.shouldTrackSideEffects = true\n      workInProgress.child = this.reconcileChildFibers(workInProgress, current.child, nextChildren, 1)\n    }\n  }\n\n  reconcileChildFibers (returnFiber, currentFirstChild, newChild, expirationTime) {\n    // currentFirstChild是本来节点上就有的child，newChild是要新添加上去的child\n    if (newChild && typeof newChild === 'object') {\n      switch(newChild.$$typeof) {\n        case constance.$$types.REACT_ELEMENT_TYPE: {\n          let newFiber = this.reconcileSingleElement(returnFiber, currentFirstChild, newChild, expirationTime)\n          this.placeSingleChild(newFiber)\n          return newFiber\n        }\n        case constance.$$types.REACT_PORTAL_TYPE: {\n          // TODO\n        }\n      }\n    }\n\n    if (typeof newChild === 'string' || typeof newChild === 'number') {\n      let newFiber = this.reconcileSingleTextNode(returnFiber, currentFirstChild, newChild, expirationTime)\n      this.placeSingleChild(newFiber)\n      return newFiber\n    }\n\n    return null\n  }\n\n  reconcileSingleElement (returnFiber, currentFirstChild, element, expirationTime) {\n    const key = element.key\n    const child = currentFirstChild\n\n    while (child) {\n      // 已经装载过child\n      if (child.key === key) {\n        if (child.tag === constance.tags.Fragment ? element.type === constance.$$types.REACT_FRAGMENT_TYPE : child.type === element.type) {\n          let existing = this.createWorkInProgress(child, element.props, expirationTime)\n          existing.index = 0\n          existing.sibling = null\n          existing.return = returnFiber\n          return existing\n        }else {\n          break\n        }\n      }else {\n        // TODO\n      }\n      child = child.sibling\n    }\n\n    let _create4 = this.createFiberFromElement(element, expirationTime)\n    _create4.return = returnFiber\n    return _create4\n  }\n\n  reconcileSingleTextNode (returnFiber, currentFirstChild, textContent, expirationTime) {\n    if (currentFirstChild && currentFirstChild.tag === constance.tags.HostText) {\n\n    }\n    let created = this.createFiberFromText(textContent, null, expirationTime)\n    created.return = returnFiber\n    return created\n  }\n\n  createFiberFromElement (element, expirationTime) {\n    let fiberTag\n    if (typeof element.type === 'function') {\n      fiberTag = constance.tags.ClassComponent\n    }else if (typeof element.type === 'string') {\n      // TODO\n      fiberTag = constance.tags.HostComponent\n    }\n\n    let fiber = new FiberNode(fiberTag, element.props)\n    fiber.type = element.type\n    fiber.expirationTime = expirationTime\n    return fiber\n  }\n\n  createFiberFromText (content, mode, expirationTime) {\n    const fiber = new FiberNode(constance.tags.HostText, content)\n    fiber.expirationTime = expirationTime\n    return fiber\n  }\n\n  placeSingleChild (newFiber) {\n    if (window.shouldTrackSideEffects && newFiber.alternate === null) {\n      // 只有在\n      newFiber.effectTag = constance.effects.Placement\n    }\n    return newFiber\n  }\n  \n}\n\nexport default UpdateWorks","/**\n * 通用的工具函数\n */\nimport Constance from './Constance'\n\nconst constance = new Constance()\n\nclass Util {\n  processUpdateQueue (current, workInProgress, queue, instance, props, renderExpirationTime) {\n    const currentQueue = queue\n    queue = workInProgress.updateQueue = {\n      baseState: currentQueue.baseState,\n      expirationTime: currentQueue.expirationTime,\n      first: currentQueue.first,\n      last: currentQueue.last,\n      isInitialized: currentQueue.isInitialized,\n      capturedValues: currentQueue.capturedValues,\n      // These fields are no longer valid because they were already committed.\n      // Reset them.\n      callbackList: null,\n      hasForceUpdate: false\n    }\n\n    queue.expirationTime = constance.works.NoWork\n\n    let state = null\n    if (queue.isInitialized) {\n      state = queue.baseState\n    }else {\n      state = queue.baseState = workInProgress.memorizedState\n      queue.isInitialized = true\n    }\n    let dontMutatePrevState = true\n    let update = queue.first\n    let didSkip = false\n\n    while(update) {\n      // 遍历所有的update，assign所有的_partialState\n      let updateExpirationTime = update.expirationTime\n      if (updateExpirationTime > renderExpirationTime) {\n\n      }\n\n      if (!didSkip) {\n        queue.first = queue.next\n        if (!queue.first) {\n          queue.last = null\n        }\n      }\n\n      // process the update\n      let _partialState = null\n      if (update.isReplace) {\n\n      }else {\n        _partialState = update.partialState\n        if (_partialState) {\n          if (dontMutatePrevState) {\n            state = Object.assign({}, state, _partialState)\n          }\n        }\n        dontMutatePrevState = false\n      }\n      if (update.isForced) {\n        queue.hasForceUpdate = true\n      }\n\n      if (update.callback) {\n        let _callBackList = queue.callbackList\n        if (_callBackList === null) {\n          _callBackList = queue.callbackList = []\n        }\n        _callBackList.push(update)\n      }\n\n      update = update.next\n    }\n\n    if (queue.callbackList !== null) {\n      workInProgress.effectTag |= constance.effects.Callback\n    } else if (!queue.first && !queue.hasForceUpdate && !queue.capturedValues) {\n      // The queue is empty. We can reset it.\n      workInProgress.updateQueue = null\n    }\n\n    if (!didSkip) {\n      didSkip = true,\n      queue.baseState = state\n    }\n    return state\n  }\n}\n\nexport default Util","/**\n * ClassComponent相关方法\n */\nimport Constance from './Constance'\nimport Util from './Util'\n\nconst constance = new Constance()\nconst util = new Util()\n\nconst ClassComponent = {\n  callGetDerivedStateFromProps (workInProgress, nextProps, prevState) {\n    const type = workInProgress.type\n    let partialState\n    if (typeof type.getDerivedStateFromProps === 'function') {\n      // 注册了getDerivedStateFromProps\n      partialState = type.getDerivedStateFromProps.call(null, nextProps, prevState)\n    }\n    return partialState\n  },\n\n  constructClassInstance (workInProgress, props, updater) {\n    const ctor = workInProgress.type // 构造器\n    let instance = new ctor(props)\n\n    instance.updater = updater\n    workInProgress.stateNode = instance\n    instance._reactInternalFiber = workInProgress\n\n    let state = instance.state || null\n    workInProgress.memorizedState = state\n\n    let partialState = this.callGetDerivedStateFromProps(workInProgress, props, state)\n    if (partialState) {\n      workInProgress.memorizedState = Object.assign({}, state, partialState)\n    }\n  },\n\n  mountClassInstance (workInProgress) {\n    const instance = workInProgress.stateNode\n    const props = workInProgress.pendingProps\n\n    instance.props = props\n    instance.state = workInProgress.memorizedState\n\n    if (typeof instance.componentDidMount === 'function') {\n      workInProgress.effectTag |= constance.effects.Update\n    }\n  },\n\n  updateClassInstance (current, workInProgress, renderExpirationTime) {\n    // invokes the update life-cycles and returns false if it should't rerender\n    let ctor = workInProgress.type\n    let instance = workInProgress.stateNode\n\n    instance.props = workInProgress.memorizedProps\n    instance.state = workInProgress.memorizedState\n\n    let oldProps = workInProgress.memorizedProps\n    let newProps = workInProgress.pendingProps\n    let hasNewLifecycles = typeof ctor.getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function'\n    if (!hasNewLifecycles &&  typeof instance.UNSAFE_componentWillReceiveProps === 'function' && instance.componentWillReceiveProps === 'function') {\n      // TODO\n    }\n\n    let oldState = workInProgress.memorizedState\n    let newState = void 0\n    let derivedStateFromCatch = void 0\n\n    // 从updateQueue中获取新的state\n    if (workInProgress.updateQueue) {\n      newState = util.processUpdateQueue(current, workInProgress, workInProgress.updateQueue, instance, newProps, renderExpirationTime)\n\n      let updateQueue = workInProgress.updateQueue\n      if (updateQueue && updateQueue.capturedValues && window.enableGetDerivedStateFromCatch && typeof ctor.getDerivedStateFromCatch === 'function') {\n        // TODO\n      }\n    }else {\n      newState = oldState\n    }\n\n    // 从生命周期中获取新的state\n    let derivedStateFromProps = void 0\n    if (oldProps !== newProps) {\n      derivedStateFromProps = this.callGetDerivedStateFromProps(workInProgress, newProps, newState)\n    }\n    if (derivedStateFromProps) {\n      newState = !newState ? derivedStateFromProps : Object.assign({}, newState, derivedStateFromProps)\n      let _updateQueue3 = workInProgress.updateQueue\n      if (_updateQueue3) {\n        _updateQueue3.baseState = Object.assign({}, _updateQueue3.baseState, derivedStateFromProps)\n      }\n    }\n\n    // if an update was already in progress, we should schedule an update effect\n    // even though we are bailing out, so that cWU/cDU are called\n    if (oldProps === newProps && oldState === newState && !(workInProgress.updateQueue !== null && workInProgress.updateQueue.hasForceUpdate)) {\n      if (typeof instance.componentDidUpdate === 'function') {\n        if (oldProps !== current.memorizedProps || oldState !== current.memorizedState) {\n          workInProgress.effectTag |= constance.effects.Update\n        }\n      }\n      if (typeof instance.getSnapshotBeforeUpdate === 'function') {\n        if (oldProps !== current.memorizedProps || oldState !== current.memorizedState) {\n          workInProgress.effectTag |= constance.effects.Snapshot\n        }\n      }\n      return false\n    }\n    \n    // 判断shouldUpdate\n    let shouldUpdate = this.checkShouldComponentUpdate(workInProgress, oldProps, newProps, oldState, newState, null)\n\n    if (shouldUpdate) {\n      if (typeof instance.componentDidUpdate === 'function') {\n        workInProgress.effectTag |= constance.effects.Update\n      }\n      if (typeof instance.getSnapshotBeforeUpdate === 'function') {\n        workInProgress.effectTag |= constance.effects.Snapshot\n      }\n    }else {\n      // TODO\n    }\n\n    instance.props = newProps\n    instance.state = newState\n\n    return shouldUpdate\n  },\n\n  checkShouldComponentUpdate (workInProgress, oldProps, newProps, oldState, newState, newContext) {\n    if (oldProps === null || workInProgress.updateQueue !==null && workInProgress.updateQueue.hasForceUpdate) {\n      return true\n    }\n\n    let instance = workInProgress.stateNode\n    let ctor = workInProgress.type\n    if (typeof instance.shouldComponentUpdate === 'function') {\n      let shouldUpdate = instance.shouldComponentUpdate(newProps, newState, newContext)\n      return shouldUpdate\n    }\n\n    return true\n  }\n}\n\nexport default ClassComponent"],"sourceRoot":""}